name: CI/CD with Docker & Render

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      BACKEND_IMAGE: 23at/healthcare_backend
      FRONTEND_IMAGE: 23at/healthcare_frontend

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Install docker-compose
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose curl

      # 4. Build and start services
      - name: Build & start services
        run: docker-compose -f docker-compose.yml up --build -d

      # 5. Wait for backend to be ready
      - name: Wait for Flask backend
        run: |
          echo "Waiting for Flask backend..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8080/health; then
              echo "Backend is ready!"
              break
            else
              echo "Waiting..."
              sleep 2
            fi
          done

      # 6. Run backend tests
      - name: Run backend tests
        run: docker exec flask_app pytest --maxfail=1 --disable-warnings -v

      # 7. Log in to DockerHub
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: 23at
          password: dckr_pat_ZwIWQ1jJPg94Mjj-McBbtb96bKk
      # Build backend image
      - name: Build backend image
        run: docker build -t healthcare_sytem_backend:latest ./backend


      # 8. Tag and push backend image
      - name: Push backend image
        run: |
          docker tag healthcare_sytem_backend:latest 23at/cicd:latest
          docker push 23at/cicd:backend-latest
      - name: Build frontend image
        run: docker build -t healthcare_sytem_frontend:latest ./frontend

      # 9. Tag and push frontend image
      - name: Push frontend image
        run: |
          docker tag healthcare_sytem_frontend:latest 23at/cicd:latest
          docker push 23at/cicd:backend-latest

      # 10. Deploy to Render
      - name: Deploy backend to Render
        id: deploy
        run: |
          RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services/srv-d3bieg37mgec739o58jg/deploys" \
            -H "Authorization: Bearer rnd_DBoE5z3fgOWZoo64IL1J8E5Ppox6" \
            -H "Accept: application/json" \
            -d '{}')
          echo "deploy_response=$RESPONSE" >> $GITHUB_ENV
          DEPLOY_ID=$(echo $RESPONSE | jq -r '.id')
          echo "deploy_id=$DEPLOY_ID"
          if [ "$DEPLOY_ID" == "null" ]; then
            echo "Render deployment failed!"
            exit 1
          fi

      # 11. Wait for Render deployment to finish
      - name: Wait for Render deploy
        run: |
          echo "Waiting for Render deploy..."
          for i in {1..30}; do
            STATUS=$(curl -s -H "Authorization: Bearer rnd_DBoE5z3fgOWZoo64IL1J8E5Ppox6" \
                      -H "Accept: application/json" \
                      "https://api.render.com/v1/deploys/$DEPLOY_ID" | jq -r '.status')
            echo "Current status: $STATUS"
            if [ "$STATUS" == "live" ]; then
              echo "Deploy successful!"
              exit 0
            elif [ "$STATUS" == "failed" ]; then
              echo "Deploy failed! Rolling back..."
              curl -X POST "https://api.render.com/v1/services/srv-d3bieg37mgec739o58jg/deploys/$DEPLOY_ID/rollback" \
                -H "Authorization: Bearer rnd_DBoE5z3fgOWZoo64IL1J8E5Ppox6" \
                -H "Accept: application/json"
              exit 1
            fi
            sleep 10
          done
