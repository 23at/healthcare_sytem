name: Docker Compose CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Install docker-compose
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose curl

      # 4. Build and start containers
      - name: Build and start services
        run: docker-compose -f docker-compose.yml up --build -d

      # 5. List Docker images
      - name: List Docker images
        run: docker images

      # 6. Wait for Flask app to be ready
      - name: Wait for Flask app
        run: |
          echo "Waiting for Flask app..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:5000/health; then
              echo "Flask app is ready!"
              break
            else
              echo "Waiting..."
              sleep 2
            fi
          done

      # 7. Run backend tests (pytest inside container)
      - name: Run backend tests
        run: docker exec flask_app pytest --maxfail=1 --disable-warnings -v

      # 8. Run Postman API tests using Newman
      - name: Install Newman
        run: npm install -g newman
        
      - name: Run Postman API tests
        run: |
          mkdir -p results
          newman run backend/tests/API_route_testing.postman_collection.json \
            --reporters cli,junit \
            --reporter-junit-export results/newman-results.xml \
            --env-var "API_URL=http://localhost:5000"
        
        # Upload Newman test results
      - name: Upload Newman test results
        uses: actions/upload-artifact@v4
        with:
          name: newman-results
          path: results/newman-results.xml


      
      # 9. Set version tag
      - name: Set version tag
        run: echo "VERSION_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # 10. Save backend image
      - name: Save backend image
        run: docker save healthcare_sytem_backend:latest -o backend.tar

      # 11. Save frontend image
      - name: Save frontend image
        run: docker save healthcare_sytem_frontend:latest -o frontend.tar

      # 12. Upload backend artifact
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend.tar

      # 13. Upload frontend artifact
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend.tar

      # 14. Tear down
      - name: Tear down
        run: docker-compose down --volumes --remove-orphans
